
package Payment;

import Data.DBConnection;
import Data.Loan;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Date;

/**
 * This is the Payment Controller class. It handles payments being made on a 
 * loan.
 * @author cjani
 * @author kristinamantha
 * @author scott
 */
public class PaymentCntl {
    
    private long amountDue;
    private Date dueDate;
    
    private DBConnection connect;
    private Statement myStmt;
    private ResultSet myRs;
    
    private int entryId;
    
    private int newLoanId;
    private int newEntryId;
    private double staticPrincipalAmount;
    private double staticCurrentTotal;
    private double staticLoanLength;
    private double staticAnnualRate;
    private double staticCompoundNum;
    private String staticInitialDate;
    double currentAmountDue;

    /**
     * A method that returns true/false depending on whether payment is late.
     * @return A boolean state representing late payment.
     */
    public boolean isLate(Date dueDate, Date currentDate){      
        return dueDate.before(currentDate);//Mot implemented
    }
    /**
     * A method that returns the (double) late fee amount based on that loan's interest
     * @param loanInterest - a double representing the interest associated with the loan
     * @param previousTotal - a double representing the total amount left in the loan
     * @return a double the represents the late fee amount
     */
    public long lateFee(long loanInterest, long previousTotal){
        long lateFeeAmount;//Mot implemented
//        loanInterest = .2;
//        loanInterest = loanInterest + .05;
//        lateFeeAmount = previousTotal * loanInterest;
        lateFeeAmount = 500;
        return lateFeeAmount;
    }
    /**
     * A method that returns the current amount due for that pay period
     * @param loanInterest - a double representing the loan's associated interest rate
     * @param previousTotal - a double representing the loan's current total
     * @return - a double representing the current amount base on the interest rate and current total
     */
    public double amountDue(double loanInterest, double currentTotal){
        currentAmountDue = ((loanInterest/100) * currentTotal);
        return currentAmountDue;    
    }
    public double getLengthOfLoan(double loanInterest, double currentTotal){
        
        double remainingLength = getStaticCurrentTotal()/amountDue(loanInterest, currentTotal);
        return remainingLength;
    }
    public void makePayment(int loanId, int customerId, double singlePayment){
        selectMaxEntryFromLoan(loanId, customerId);
        updateCurrentLoan(getNewEntryId());
        selectStaticData(getNewEntryId());
        setNewEntryId(0);
        
        setConnect(new DBConnection());
        getConnect().init();
        try{
            String date;
            LocalDateTime now = LocalDateTime.now();
            date = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT).format(now);
            System.out.println("The current date: " + date);
            
            String query = "insert into loan"
                    + " values ("//entirId is auto generated by sql database
                    + loanId + ", "
                    + customerId + ", "
                    + getStaticPrincipalAmount() + ", " 
                    + (getStaticCurrentTotal() - singlePayment) + ", " 
                    + getLengthOfLoan(getStaticAnnualRate(), (getStaticCurrentTotal() - singlePayment)) + ", " 
                    + getStaticAnnualRate() + ", "
                    + getStaticCompoundNum() + ", "
                    + singlePayment + ", "
                    + "'" + date + "',"
                    + "'" + getStaticInitialDate() + "',"
                    + "'True')";
            
            setMyStmt(getConnect().getMyConnection().createStatement());
            getMyStmt().executeUpdate(query);        
        }catch(Exception e){      
            e.printStackTrace();
        }finally{
            connect.killConnections();            
        }
        
        setStaticPrincipalAmount(0);
        setStaticCurrentTotal(0);
        setStaticLoanLength(0);
        setStaticAnnualRate(0);
        setStaticCompoundNum(0);
        setStaticInitialDate("");
        
        //long methods, long parameters, large class
    }

    public void selectStaticData(int entryId){
        connect = new DBConnection();
        connect.init();
        try{
           String selectSql = "select principalAmount, "
                   + "currentTotal, "
                   + "loanLength, "
                   + "annualRate, "
                   + "compoundNum, "
                   + "initialDate from loan where entryId =" + entryId; 
           
            setMyStmt(connect.getMyConnection().createStatement());
            setMyRs(getMyStmt().executeQuery(selectSql));
            
            while (getMyRs().next()){
                setStaticPrincipalAmount(getMyRs().getInt("principalAmount"));
                setStaticCurrentTotal(getMyRs().getInt("currentTotal"));
                setStaticLoanLength(getMyRs().getInt("loanLength"));
                setStaticAnnualRate(getMyRs().getInt("annualRate"));
                setStaticCompoundNum(getMyRs().getInt("compoundNum"));
                setStaticInitialDate(getMyRs().getString("initialDate"));
            }
            
        }catch (SQLException e){
            e.printStackTrace();
            System.out.println("Failed to create connection to azure database. conneciton = null");
		}
        finally{
            connect.killConnections();
        }
    }
    public void selectMaxEntryFromLoan(int currentLoanId, int currentUserId){
        connect = new DBConnection();
        connect.init();
        try{
           String selectSql = "select entryId from loan where loanId = " + currentLoanId + ""; 
           
            setMyStmt(connect.getMyConnection().createStatement());
            setMyRs(getMyStmt().executeQuery(selectSql));
            
            while (getMyRs().next()){
                System.out.println("EntryId: " + getMyRs().getInt("entryId"));
                setNewEntryId(getMyRs().getInt("entryId"));
                
            }
            
        }catch (SQLException e){
            e.printStackTrace();
            System.out.println("Failed to create connection to azure database. conneciton = null");
		}
        finally{
            connect.killConnections();
        }
    }
     public void updateCurrentLoan(int entryId){
        connect = new DBConnection();
        connect.init();
        try{    
            
            String query = "UPDATE loan "
                    + "set isCurrentBalance = 'false'"                    
                    + " WHERE entryId = " + entryId;
            
            myStmt = connect.getMyConnection().createStatement();            
            myStmt.executeUpdate(query);
        }catch(Exception e){ 
            e.printStackTrace();
        }finally{
            connect.killConnections();
        }
    }   
    public void getEntrySQL(int loanId){
        setConnect(new DBConnection());
        getConnect().init();
        
        try{
            String selectSql = "SELECT t.entryId from (SELECT entryId, loanId, "
                    + "ROW_NUMBER() OVER (PARTITION BY entryId ORDER BY "
                    + "loanId DESC) row_num FROM loan WHERE loanId =" + loanId + ")t WHERE t.row_num = 1";
            setMyStmt(getConnect().getMyConnection().createStatement());
            setMyRs(getMyStmt().executeQuery(selectSql));
            
            while (getMyRs().next()){
                setEntryId(getMyRs().getInt("entryId"));
                System.out.println("The entryId: " + getEntryId());
            }
        }catch (SQLException e){
            e.printStackTrace();
            System.out.println("Failed to create connection to azure database. conneciton = null");
		}
        finally{
            connect.killConnections();
        }         
        
    }
    /**
     * @return the connect
     */
    public DBConnection getConnect() {
        return connect;
    }

    /**
     * @param connect the connect to set
     */
    public void setConnect(DBConnection connect) {
        this.connect = connect;
    }

    /**
     * @return the myStmt
     */
    public Statement getMyStmt() {
        return myStmt;
    }

    /**
     * @param myStmt the myStmt to set
     */
    public void setMyStmt(Statement myStmt) {
        this.myStmt = myStmt;
    }

    /**
     * @return the myRs
     */
    public ResultSet getMyRs() {
        return myRs;
    }

    /**
     * @param myRs the myRs to set
     */
    public void setMyRs(ResultSet myRs) {
        this.myRs = myRs;
    }

    /**
     * @return the entryId
     */
    public int getEntryId() {
        return entryId;
    }

    /**
     * @param entryId the entryId to set
     */
    public void setEntryId(int entryId) {
        this.entryId = entryId;
    }

    /**
     * @return the amountDue
     */
    public long getAmountDue() {
        return amountDue;
    }

    /**
     * @param amountDue the amountDue to set
     */
    public void setAmountDue(long amountDue) {
        this.amountDue = amountDue;
    }

    /**
     * @return the dueDate
     */
    public Date getDueDate() {
        return dueDate;
    }

    /**
     * @param dueDate the dueDate to set
     */
    public void setDueDate(Date dueDate) {
        this.dueDate = dueDate;
    }

    /**
     * @return the newLoanId
     */
    public int getNewLoanId() {
        return newLoanId;
    }

    /**
     * @param newLoanId the newLoanId to set
     */
    public void setNewLoanId(int newLoanId) {
        this.newLoanId = newLoanId;
    }

    /**
     * @return the newEntryId
     */
    public int getNewEntryId() {
        return newEntryId;
    }

    /**
     * @param newEntryId the newEntryId to set
     */
    public void setNewEntryId(int newEntryId) {
        this.newEntryId = newEntryId;
    }

    /**
     * @return the staticPrincipalAmount
     */
    public double getStaticPrincipalAmount() {
        return staticPrincipalAmount;
    }

    /**
     * @param staticPrincipalAmount the staticPrincipalAmount to set
     */
    public void setStaticPrincipalAmount(double staticPrincipalAmount) {
        this.staticPrincipalAmount = staticPrincipalAmount;
    }

    /**
     * @return the staticCurrentTotal
     */
    public double getStaticCurrentTotal() {
        return staticCurrentTotal;
    }

    /**
     * @param staticCurrentTotal the staticCurrentTotal to set
     */
    public void setStaticCurrentTotal(double staticCurrentTotal) {
        this.staticCurrentTotal = staticCurrentTotal;
    }

    /**
     * @return the staticLoanLength
     */
    public double getStaticLoanLength() {
        return staticLoanLength;
    }

    /**
     * @param staticLoanLength the staticLoanLength to set
     */
    public void setStaticLoanLength(double staticLoanLength) {
        this.staticLoanLength = staticLoanLength;
    }

    /**
     * @return the staticAnnualRate
     */
    public double getStaticAnnualRate() {
        return staticAnnualRate;
    }

    /**
     * @param staticAnnualRate the staticAnnualRate to set
     */
    public void setStaticAnnualRate(double staticAnnualRate) {
        this.staticAnnualRate = staticAnnualRate;
    }

    /**
     * @return the staticCompoundNum
     */
    public double getStaticCompoundNum() {
        return staticCompoundNum;
    }

    /**
     * @param staticCompoundNum the staticCompoundNum to set
     */
    public void setStaticCompoundNum(double staticCompoundNum) {
        this.staticCompoundNum = staticCompoundNum;
    }

    /**
     * @return the staticInitialDate
     */
    public String getStaticInitialDate() {
        return staticInitialDate;
    }

    /**
     * @param staticInitialDate the staticInitialDate to set
     */
    public void setStaticInitialDate(String staticInitialDate) {
        this.staticInitialDate = staticInitialDate;
    }
}
